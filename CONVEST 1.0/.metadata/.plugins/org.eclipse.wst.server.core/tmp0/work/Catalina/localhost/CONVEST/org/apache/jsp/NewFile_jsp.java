/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.35
 * Generated at: 2021-01-05 08:01:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class NewFile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/d3.min.js\"></script>\r\n");
      out.write("<!--import jquery3.3.1-->\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/jquery.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<svg></svg>\r\n");
      out.write("\t<script>\r\n");
      out.write("        //get json file\r\n");
      out.write("        alert(\"hello\");\r\n");
      out.write("        ");

       String number=request.getParameter("name");
        System.out.println(number);
       
       
      out.write("\r\n");
      out.write("       // out.println(number);\r\n");
      out.write("       alert(number);\r\n");
      out.write("        number=\"data\";\r\n");
      out.write("        number=number.concat(\".json\");\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        d3.json(number).then(\r\n");
      out.write("         function(dataJson){\r\n");
      out.write("            //GroupExplorer constructing function\r\n");
      out.write("            //this is one way to create a javascript object\r\n");
      out.write("            function GroupExplorer(data){\r\n");
      out.write("                //create an object-include some data\r\n");
      out.write("                //this is an another way to create a javascript object\r\n");
      out.write("                \r\n");
      out.write("                var defaultConfig = {\r\n");
      out.write("                    data:{\"nodes\":[],\"links\":[]},//critical data set\r\n");
      out.write("                    windowWidth:window.innerWidth,\r\n");
      out.write("                    windowHeight:window.innerHeight,\r\n");
      out.write("                    defaultLinkDistance:150\r\n");
      out.write("                }\r\n");
      out.write("                //because the initial \"data\" is null,\r\n");
      out.write("                //so you need use jquery syntax \"extend\" to merge the json data\r\n");
      out.write("                //below,merge \"data\" into \"defaultWindow\"\r\n");
      out.write("                //\"true\" mean do not cover\r\n");
      out.write("                //details see jquery API document\r\n");
      out.write("                $.extend(true,defaultConfig,data);\r\n");
      out.write("\r\n");
      out.write("                //so now we get the json file that we need\r\n");
      out.write("                //now let`s begin,transform json file to force graph data\r\n");
      out.write("                //but first ,we need to get \"svg\"\r\n");
      out.write("                var svg = d3.select(\"svg\");\r\n");
      out.write("                svg.attr(\"width\",defaultConfig.windowWidth);\r\n");
      out.write("                svg.attr(\"height\",defaultConfig.windowHeight);\r\n");
      out.write("\r\n");
      out.write("                defaultConfig.data.links.forEach(function(e){\r\n");
      out.write("                    if(typeof e.source==\"number\"&&typeof e.target==\"number\"){\r\n");
      out.write("                        var sourceNode = defaultConfig.data.nodes.filter(function(n){\r\n");
      out.write("                            return n.id === e.source;\r\n");
      out.write("                        })[0];\r\n");
      out.write("                        var targetNode = defaultConfig.data.nodes.filter(function(n){\r\n");
      out.write("                            return n.id === e.target;\r\n");
      out.write("                        })[0];\r\n");
      out.write("                        e.source = sourceNode;\r\n");
      out.write("                        e.target = targetNode;\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("                //create a force graph\r\n");
      out.write("                var forceSimulation = d3.forceSimulation()\r\n");
      out.write("                    .force(\"link\",d3.forceLink())\r\n");
      out.write("                    .force(\"charge\",d3.forceManyBody())\r\n");
      out.write("                    .force(\"center\",d3.forceCenter(defaultConfig.windowWidth/2,defaultConfig.windowHeight/2));\r\n");
      out.write("\r\n");
      out.write("                //transform nodes data\r\n");
      out.write("                forceSimulation.nodes(defaultConfig.data.nodes)\r\n");
      out.write("                    .on(\"tick\",ticked);\r\n");
      out.write("                //tranform links data\r\n");
      out.write("                forceSimulation.force(\"link\")\r\n");
      out.write("                    .links(defaultConfig.data.links)\r\n");
      out.write("                    .distance(defaultConfig.defaultLinkDistance);\r\n");
      out.write("\r\n");
      out.write("                console.log(defaultConfig.data.nodes);\r\n");
      out.write("                console.log(defaultConfig.data.links);\r\n");
      out.write("\r\n");
      out.write("                //define arrow\r\n");
      out.write("                svg.append(\"svg:defs\")\r\n");
      out.write("                    .append(\"svg:marker\")\r\n");
      out.write("                    .attr(\"id\", \"marker\")\r\n");
      out.write("                    .attr('viewBox', '0 -5 10 10')\r\n");
      out.write("                    .attr(\"refX\", 20)\r\n");
      out.write("                    .attr(\"refY\",0)\r\n");
      out.write("                    .attr('markerWidth', 10)\r\n");
      out.write("                    .attr('markerHeight', 10)\r\n");
      out.write("                    .attr('orient', 'auto')\r\n");
      out.write("                    .append('svg:path')\r\n");
      out.write("                    .attr('d', 'M0,-5L10,0L0,5')\r\n");
      out.write("                    .attr(\"fill\",\"brown\");\r\n");
      out.write("                //draw links\r\n");
      out.write("                var links = svg.append(\"g\")\r\n");
      out.write("                    .selectAll(\"line\")\r\n");
      out.write("                    .data(defaultConfig.data.links)\r\n");
      out.write("                    .enter()\r\n");
      out.write("                    .append(\"line\")\r\n");
      out.write("                    .attr(\"x1\",function(n){return n.source.x})\r\n");
      out.write("                    .attr(\"y1\",function(n){return n.source.y})\r\n");
      out.write("                    .attr(\"x2\",function(n){return n.target.x})\r\n");
      out.write("                    .attr(\"y2\",function(n){return n.target.y})\r\n");
      out.write("                    .attr(\"stroke\",\"brown\")\r\n");
      out.write("                    .attr(\"stroke-width\",1)\r\n");
      out.write("                    .attr(\"marker-end\",\"url(#marker)\");\r\n");
      out.write("                //draw links-text\r\n");
      out.write("                var links_text = svg.append(\"g\")\r\n");
      out.write("                    .selectAll(\"text\")\r\n");
      out.write("                    .data(defaultConfig.data.links)\r\n");
      out.write("                    .enter()\r\n");
      out.write("                    .append(\"text\")\r\n");
      out.write("                    .attr(\"x\",function(e){\r\n");
      out.write("                        return (e.source.x+e.target.x)/2;\r\n");
      out.write("                    })\r\n");
      out.write("                    .attr(\"y\",function(e){\r\n");
      out.write("                        console.log(e.source.y+\"+\"+e.target.y)\r\n");
      out.write("                        return (e.source.y+e.target.y)/2;\r\n");
      out.write("                    })\r\n");
      out.write("                    .attr(\"font-size\",10)\r\n");
      out.write("                    .text(function(e){return e.type});\r\n");
      out.write("                //draw nodes group = node+node-text\r\n");
      out.write("                var nodes_g = svg.append(\"g\")\r\n");
      out.write("                    .selectAll(\"g\")\r\n");
      out.write("                    .data(defaultConfig.data.nodes)\r\n");
      out.write("                    .enter()\r\n");
      out.write("                    .append(\"g\")\r\n");
      out.write("                    .attr(\"transform\",function(e){\r\n");
      out.write("                        return \"translate(\"+e.x+\",\"+e.y+\")\";\r\n");
      out.write("                    })\r\n");
      out.write("                    .call(d3.drag()\r\n");
      out.write("                        .on(\"start\",started)\r\n");
      out.write("                        .on(\"drag\",dragged)\r\n");
      out.write("                        .on(\"end\",ended));\r\n");
      out.write("                //draw nodes\r\n");
      out.write("                nodes_g.append(\"circle\")\r\n");
      out.write("                    .attr(\"r\",10)\r\n");
      out.write("                    .attr(\"fill\",\"blue\");\r\n");
      out.write("                //draw node-text\r\n");
      out.write("                nodes_g.append(\"text\")\r\n");
      out.write("                    .attr(\"x\",-15)\r\n");
      out.write("                    .attr(\"y\",20)\r\n");
      out.write("                    .attr(\"font-size\",10)\r\n");
      out.write("                    .text(function(e){return e.name});\r\n");
      out.write("\r\n");
      out.write("                function started(d){\r\n");
      out.write("                    if(!d3.event.active){\r\n");
      out.write("                        forceSimulation.alphaTarget(0.8).restart();\r\n");
      out.write("                    }\r\n");
      out.write("                    d.fx = d.x;\r\n");
      out.write("                    d.fy = d.y;\r\n");
      out.write("                }\r\n");
      out.write("                function dragged(d){\r\n");
      out.write("                    d.fx = d3.event.x;\r\n");
      out.write("                    d.fy = d3.event.y;\r\n");
      out.write("                }\r\n");
      out.write("                function ended(d) {\r\n");
      out.write("                    if(!d3.event.active){\r\n");
      out.write("                        forceSimulation.alphaTarget(0);\r\n");
      out.write("                    }\r\n");
      out.write("                    d.fx = null;\r\n");
      out.write("                    d.fy = null;\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                function ticked(){\r\n");
      out.write("                    links\r\n");
      out.write("                        .attr(\"x1\",function(n){return n.source.x})\r\n");
      out.write("                        .attr(\"y1\",function(n){return n.source.y})\r\n");
      out.write("                        .attr(\"x2\",function(n){return n.target.x})\r\n");
      out.write("                        .attr(\"y2\",function(n){return n.target.y})\r\n");
      out.write("                    links_text\r\n");
      out.write("                        .attr(\"x\",function(e){\r\n");
      out.write("                            return (e.source.x+e.target.x)/2;\r\n");
      out.write("                        })\r\n");
      out.write("                        .attr(\"y\",function(e){\r\n");
      out.write("                            return (e.source.y+e.target.y)/2;\r\n");
      out.write("                        })\r\n");
      out.write("                    nodes_g\r\n");
      out.write("                        .attr(\"transform\",function(e){\r\n");
      out.write("                            return \"translate(\"+e.x+\",\"+e.y+\")\";\r\n");
      out.write("                        })\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("            }\r\n");
      out.write("            //because in the way of creating a javascript object,\r\n");
      out.write("            //you need to use \"new\" to use it\r\n");
      out.write("            new GroupExplorer({data:dataJson});\r\n");
      out.write("        })\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
